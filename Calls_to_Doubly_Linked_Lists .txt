Calls to Doubly_Linked_lists package

procedure Clear (Container : in out List);
Removes all the elements from Container.

function First (Container : List) return Cursor;
If Container is empty, First returns the value No_Element. Otherwise it returns a cursor that designates the first node in Container.

function Element (Position : Cursor) return Element_Type;
If Position equals No_Element, then Constraint_Error is propagated. Otherwise, Element returns the element designated by Position.

function Next (Position : Cursor) return Cursor;
If Position equals No_Element or designates the last element of the container, then Next returns the value No_Element. Otherwise, it returns a cursor that designates the successor of the element designated by Position.

procedure Append (Container : in out List;
                  New_Item  : in     Element_Type;
                  Count     : in     Count_Type := 1);
Equivalent to Insert (Container, No_Element, New_Item, Count).

function Is_Empty (Container : List) return Boolean;
Equivalent to Length (Container) = 0.

procedure Delete (Container : in out List;
                  Position  : in out Cursor;
                  Count     : in     Count_Type := 1);
If Position equals No_Element, then Constraint_Error is propagated. If Position does not designate an element in Container, then Program_Error is propagated. Otherwise Delete removes (from Container) Count elements starting at the element designated by Position (or all of the elements starting at Position if there are fewer than Count elements starting at Position). Finally, Position is set to No_Element.






